# -*- coding: utf-8 -*-
"""Final_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v1xZ3Rw7xJyTB9qiweXoqR12sdjNvLgL

# **Final Project**
By: Andreina Arias

# Introduction

In 2020 New York City (NYC) had experienced a large death pattern due to covid-19, but was it the leading cause of death? The data set I obtained from the NYC data website, list the leading causes of death in NYC since 2007. The variables used from the data set are Cause of Death (categories such as heart disease, cancer, covid-19, respiratory diseases, and more), death rate (the measures of mortality rate (per 100,000 population)), death count, and age adjusted data (looks at the difference within the death rate eliminating the difference in age). The relationship between death rate, age adjusted death rate, and death count will be used analyzed.  


Data resource: https://data.cityofnewyork.us/Health/New-York-City-Leading-Causes-of-Death/jb7j-dtam/about_data

Raw data: https://raw.githubusercontent.com/Andreina-A/Project2_Data607/refs/heads/main/New_York_City_Leading_Causes_of_Death_20241013
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
Death_Causes_DF=pd.read_csv('https://raw.githubusercontent.com/Andreina-A/Project2_Data607/refs/heads/main/New_York_City_Leading_Causes_of_Death_20241013.csv', na_values=['NA', 'n/a', ''])#Imported CSV data and create a data frame
Death_Causes_DF.head(10)#Shows the first 10 columns

missing_values = Death_Causes_DF.isnull().sum()#Counts missing values
print("Missing Values:\n", missing_values)

info = Death_Causes_DF.info()#Summary of the dataframe
print(info)

"""# Data Wrangling

"""

Death_Causes_DF.rename(columns={'Death Rate':'Death_rate','Leading Cause':'Causes','Age Adjusted Death Rate':'AADR'}, inplace=True)#renamed columns
Death_Causes_DF.head()

Death_Causes_DF['Causes'] = Death_Causes_DF['Causes'].replace({"Diseases of Heart (I00-I09, I11, I13, I20-I51)":"Ischaemic heart disease", "Alzheimer's Disease (G30)":"Alzheimer disease", "Cerebrovascular Disease (Stroke: I60-I69)":"Stroke", "Chronic Lower Respiratory Diseases (J40-J47)":"Chronic obstructive pulmonary disease","Malignant Neoplasms (Cancer: C00-C97)":"Cancer",	"Accidents Except Drug Posioning (V01-X39, X43, X45-X59, Y85-Y86)":"Accident", "Intentional Self-Harm (Suicide: X60-X84, Y87.0)":"Self-harm", "Mental and Behavioral Disorders due to Accidental Poisoning and Other Psychoactive Substance Use (F11-F16, F18-F19, X40-X42, X44)":"Mental and behavioral Health", "Intentional Self-Harm (Suicide: U03, X60-X84, Y87.0)" : "Self-harm"}) #renamed a few death causes label as their names were too long.

Death_Causes_DF.applymap(lambda x: isinstance(x, (int, float))).all()#Checked if all data in each column was numeric

Death_Causes_DF[['Deaths', 'Death_rate', 'AADR']] = Death_Causes_DF[['Deaths', 'Death_rate', 'AADR']].replace('.', pd.NA).apply(pd.to_numeric, errors='coerce')#replace missing values that are '.' into NAN and then applies the numeric function to a group of columns

Death_Causes_DF=Death_Causes_DF.dropna()#Dropped missing values, to avoid erroneous values I rather drop the NA values

Death_Causes_DF.drop(['Sex', 'Race Ethnicity'],axis=1, inplace=True)#dropped the sex and age-adjusted column
Death_Causes_DF.head(10)

Data_filtered = Death_Causes_DF[Death_Causes_DF['Year']==2020]#filtered data to only show leading dieases in 2020
print("\nFiltered DataFrame:\n", Data_filtered)
Data_filtered.head(10)

#Seaborn plot of Causes of death vs death count
plt.figure(figsize=(10,6))
sns.barplot(x='Deaths', y='Causes', data=Data_filtered, palette='viridis', ci=None)#removed confidence interval

# Adding labels and title
plt.title('Death Causes Vs Death Count', fontsize=16)
plt.xlabel('Death Count', fontsize=12)
plt.ylabel('Cause of Death', fontsize=12)

# Show the plot
plt.show()

#Seaborn plot of Causes of death vs death rate
plt.figure(figsize=(10,6))
sns.barplot(x='Death_rate', y='Causes', data=Data_filtered, palette='viridis', ci=None) #removed confidence interval

# Adding labels and title
plt.title('Death Causes Vs Death Rate', fontsize=16)
plt.xlabel('Death Rate', fontsize=12)
plt.ylabel('Cause of Death', fontsize=12)

# Show the plot
plt.show()

#Seaborn plot of Causes of death vs Age adjusted death rate
plt.figure(figsize=(10,6))
sns.barplot(x='AADR', y='Causes', data=Data_filtered, palette='viridis', ci=None) #removed confidence interval

# Adding labels and title
plt.title('Death Causes Vs Age-Adjusted Death Rate', fontsize=16)
plt.xlabel('Age-Adjusted Death Rate', fontsize=12)
plt.ylabel('Cause of Death', fontsize=12)

# Show the plot
plt.show()

Death_count_summary = Data_filtered.groupby('Causes')['Deaths'].agg(['mean', 'min', 'max'])#Grouped the causes of death with the number of deaths and calculated the mean, min, and max.
print(Death_count_summary)

sorted_count_summary = Death_count_summary.sort_values(by=['max', 'Causes'])#Sorted the aggregated group by ascending order of Max death count and then by the ascending order of the causes names
print(sorted_count_summary)

Death_rate_summary = Data_filtered.groupby('Causes')['Death_rate'].agg(['mean', 'min', 'max'])#Grouped the causes of death with the death rate and calculated the mean, min, and max.
print(Death_rate_summary)

sorted_rate_summary = Death_rate_summary.sort_values(by=['max', 'Causes'])#Sorted the aggregated group by ascending order of Max death rate and then by the ascending order of the causes names
print(sorted_rate_summary)

Death_AADR_summary = Data_filtered.groupby('Causes')['AADR'].agg(['mean', 'min', 'max'])#Grouped the causes of death with the age adjusted death rate and calculated the mean, min, and max.
print(Death_count_summary)

sorted_AADR_summary = Death_AADR_summary.sort_values(by=['max', 'Causes'])#Sorted the aggregated group by ascending order of Max AADR and then by the ascending order of the causes names
print(sorted_AADR_summary)

#subset data only for the counts and rates
Data=Data_filtered[['Deaths','Death_rate','AADR']]
Data.head()

#created a pairplot to visualize relationships for rates and count
sns.pairplot(Data)
plt.show()

#Created a correlation matrix for the count and rates
correlation_matrix = Data.corr()
print(correlation_matrix)

"""# Conclusions

Based on the analysis made heart disease the top leading cause of death in 2020 for NYC, although the covid-19 had a higher death rate and age adjusted death rate, covid-19 didn’t cause the max death but it had a surge during a short period of time(pandemic). Surprisingly, covid-19 wasn’t biggest killer during but many people took action to prevent the spread or getting covid yet again heart disease was the number cause of death and there isn’t many advertisements on preventing heart disease, nor prizes were given to those that decreased their sodium intake just like those who received the covid vaccine. The information from this data can be useful to try give the public a sense of awareness, it would be great to compare this data with the leading causes from other countries, especially Wuhan, China where covid-19 had first emerged from.
"""